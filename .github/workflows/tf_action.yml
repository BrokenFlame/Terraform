name: Terraform Actions

on:
  pull_request:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to execute.'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Environment to execute Terraform against.'
        type: choice
        required: true
        options:
        - development
        - qa
        - uat
        - staging
        - production

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    if:  ${{ inputs.action == 'plan' }} || github.event_name == 'pull_request'
    continue-on-error: true
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - run: echo terraform init -backend-config=${{ inputs.environment }}
      - run: terraform init -backend-config=${{ inputs.environment }}
      - id: plan
        run: terraform plan -no-color
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  terraform-apply:
    runs-on: ubuntu-latest
    if:  ${{ inputs.action == 'apply' }}
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - run: echo terraform init -backend-config=${{ inputs.environment }}
      - run: terraform init -backend-config=${{ inputs.environment }}
      - id: apply
        run: terraform apply -no-color
      - run: echo ${{ steps.apply.outputs.stdout }}
      - run: echo ${{ steps.apply.outputs.stderr }}
      - run: echo ${{ steps.apply.outputs.exitcode }}
       
  terraform-destroy:
    runs-on: ubuntu-latest
    if:  ${{ inputs.action == 'destroy' }}
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - run: echo terraform init -backend-config=${{ inputs.environment }}
      - run: terraform init -backend-config=${{ inputs.environment }}
      - id: apply
        run: terraform destroy -no-color
      - run: echo ${{ steps.destroy.outputs.stdout }}
      - run: echo ${{ steps.destroy.outputs.stderr }}
      - run: echo ${{ steps.destroy.outputs.exitcode }}
      
